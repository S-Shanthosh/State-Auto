def lambda_handler(event, context):
    child_accounts = get_child_accounts()
    region = 'us-east-1'
    all_stopped_instances = []
    processed_accounts = 0
    accounts_with_errors = 0
    accounts_with_no_instances = 0

    logger.info(f"Total child accounts: {len(child_accounts)}")

    for account in child_accounts:
        try:
            ec2_client = assume_role_and_get_client(account['id'], 'OrganizationAccountAccessRole', region)
            stopped_instances = get_stopped_instances(ec2_client)
            
            if stopped_instances:
                for instance in stopped_instances:
                    instance['AccountId'] = account['id']
                    instance['AccountName'] = account['name']
                    all_stopped_instances.append(instance)
                logger.info(f"Retrieved {len(stopped_instances)} stopped instances from account {account['name']} (ID: {account['id']})")
            else:
                logger.info(f"No stopped instances found in account {account['name']} (ID: {account['id']})")
                accounts_with_no_instances += 1
            
            processed_accounts += 1
        except Exception as e:
            logger.error(f"Error retrieving instances for account {account['name']} (ID: {account['id']}): {str(e)}")
            accounts_with_errors += 1

    # Prepare CSV
    csv_report = StringIO()
    fieldnames = ['AccountId', 'AccountName', 'InstanceName', 'InstanceId', 'InstanceType', 'PrivateIP', 'VPCID', 'SubnetID', 'LaunchTime', 'StopTime', 'StoppedDays']
    writer = csv.DictWriter(csv_report, fieldnames=fieldnames)
    writer.writeheader()

    for instance in all_stopped_instances:
        writer.writerow(instance)

    # Upload CSV to S3
    try:
        s3 = boto3.client('s3')
        bucket_name = 'aws-ec2-recommend-test'
        folder_name = 'EC2-Stopped-Instances-List-Child-Accounts'
        file_name = f'{folder_name}/stopped_instances_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv'
        
        s3.put_object(Bucket=bucket_name, Key=file_name, Body=csv_report.getvalue())
        logger.info(f"Uploaded report to s3://{bucket_name}/{file_name}")

        # Log summary
        logger.info(f"Summary:")
        logger.info(f"Total child accounts: {len(child_accounts)}")
        logger.info(f"Accounts processed successfully: {processed_accounts}")
        logger.info(f"Accounts with errors: {accounts_with_errors}")
        logger.info(f"Accounts with no stopped instances: {accounts_with_no_instances}")
        logger.info(f"Total stopped instances found: {len(all_stopped_instances)}")

        return {
            'statusCode': 200,
            'body': json.dumps({
                'message': f'Uploaded report to s3://{bucket_name}/{file_name}',
                'summary': {
                    'total_accounts': len(child_accounts),
                    'processed_accounts': processed_accounts,
                    'accounts_with_errors': accounts_with_errors,
                    'accounts_with_no_instances': accounts_with_no_instances,
                    'total_stopped_instances': len(all_stopped_instances)
                }
            })
        }
    except Exception as e:
        logger.error(f"Error uploading report to S3: {str(e)}")
        return {
            'statusCode': 500,
            'body': json.dumps({
                'error': f'Error uploading report to S3: {str(e)}'
            })
        }
