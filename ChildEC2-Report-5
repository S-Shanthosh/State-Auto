def lambda_handler(event, context):
    child_accounts = get_child_accounts()
    region = 'us-east-1'
    all_stopped_instances = []
    processed_accounts = 0
    accounts_with_errors = 0
    accounts_with_no_instances = 0

    logger.info(f"Total child accounts: {len(child_accounts)}")

    for account in child_accounts:
        logger.info(f"Processing account {account['name']} (ID: {account['id']})")
        try:
            ec2_client = assume_role_and_get_client(account['id'], 'OrganizationAccountAccessRole', region)
            stopped_instances = get_stopped_instances(ec2_client)
            
            if stopped_instances:
                for instance in stopped_instances:
                    instance['AccountId'] = account['id']
                    instance['AccountName'] = account['name']
                    all_stopped_instances.append(instance)
                logger.info(f"Retrieved {len(stopped_instances)} stopped instances from account {account['name']} (ID: {account['id']})")
            else:
                logger.info(f"No stopped instances found in account {account['name']} (ID: {account['id']})")
                accounts_with_no_instances += 1
            
            processed_accounts += 1
        except Exception as e:
            logger.error(f"Error processing account {account['name']} (ID: {account['id']}): {str(e)}")
            accounts_with_errors += 1

    # Prepare and upload main CSV report
    upload_csv_to_s3(all_stopped_instances, 'stopped_instances_report')

    # Log summary
    logger.info(f"Summary:")
    logger.info(f"Total child accounts: {len(child_accounts)}")
    logger.info(f"Accounts processed successfully: {processed_accounts}")
    logger.info(f"Accounts with errors: {accounts_with_errors}")
    logger.info(f"Accounts with no stopped instances: {accounts_with_no_instances}")
    logger.info(f"Total stopped instances found: {len(all_stopped_instances)}")

    return {
        'statusCode': 200,
        'body': json.dumps({
            'message': 'Report uploaded to S3',
            'summary': {
                'total_accounts': len(child_accounts),
                'processed_accounts': processed_accounts,
                'accounts_with_errors': accounts_with_errors,
                'accounts_with_no_instances': accounts_with_no_instances,
                'total_stopped_instances': len(all_stopped_instances)
            }
        })
    }
